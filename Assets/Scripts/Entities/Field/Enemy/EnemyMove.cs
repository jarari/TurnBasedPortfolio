using UnityEngine;

namespace TurnBased.Entities.Field { 

    /// <summary>
    /// 에너미의 움직임을 담당할 클래스
    /// </summary>
    public class EnemyMove
    {
        float speed = 1.0f;
        
        /// <summary>
        /// 플레이어를 추적할 함수
        /// </summary>
        /// <param name="target">추적할 플레이어</param>
        /// <param name="enemy">에너미</param>
        /// <param name="cc">에너미의 캐릭터 컨트롤러</param>
        public void FE_Move(Vector3 target, CharacterController cc, GameObject enemy)
        {
            // 이동 방향을 플레이어 위치로 설정한다
            Vector3 dir = (target - enemy.transform.position).normalized;
                        
            // 캐릭터 컨트롤러를 이용해 이동을 시작한다
            cc.Move(dir * speed * Time.deltaTime);
        }

        public void FE_Rotate(Vector3 target, CharacterController cc, GameObject enemy)
        {
            // 회전 방향을 플레이어로 정한다
            Vector3 dir = (target - cc.transform.position).normalized;
            // y축 회전 방지
            dir.y = 0;
            // 타겟 방향을 바라보는 회전 생성
            Quaternion targetRotate = Quaternion.LookRotation(dir);
            // 현재 회전에서 타겟 회전까지 일정한 속도로 회전
            cc.transform.rotation = Quaternion.RotateTowards(cc.transform.rotation, targetRotate, 720 * Time.deltaTime);

        }

        /// <summary>
        /// 에너미가 공격이 가능한 거리 까지 온다면 불값을 반환 시켜 알릴 함수
        /// </summary>
        /// <param name="target">추적할 플레이어</param>
        /// <param name="enemy">에너미</param>
        /// <param name="distance">공격이 가능한 거리</param>
        /// <returns></returns>
        public bool FE_SwitchMove(Vector3 target, GameObject enemy, float distance)
        {
            // 에너미와 플레이어 사이의 거리가 공격 거리보다 작다면
            if (Vector3.Distance(enemy.transform.position, target) < distance)
            {
                // true를 반환
                return true;
            }
            // 아니라면
            else
                // false를 반환
                return false;
        }
    }

}